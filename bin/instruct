#!/usr/bin/env rc
# Run instruct model alpaca-lora with prompt structure required from lora training
# Without arg stdin means instruction w/o input, if arg then arg is the instruction and stdin is additional input
# https://github.com/tloen/alpaca-lora
# weights for llama.cpp from https://github.com/antimatter15/alpaca.cpp

fn alpaca{
	cd $HOME/local/llama.cpp
	./main -m ../models/ggml-alpaca-7b-q4.bin -f $1
	#./main -m ../models/ggml-alpaca-13b-q4.bin -f $1

}

prompt_file=`{mktemp}
#output_file=`{mktemp}

# Note: the repeated if/if not with the same condition are necessary
# rc does not see variables defined in the block where the here doc is also defined
# I don't know if this is a bug or a feature

if (~ $#* 0) {
	# just instruction
	instruction=`{cat}
}
if not{
	# instruction plus input
	instruction=$"*
	input=`{cat}
}


if (~ $#* 0) cat <<! | head -c -1 >$prompt_file
Below is an instruction that describes a task. Write a response that appropriately completes the request.

### Instruction:
$instruction

### Response:
!
if not cat <<! | head -c -1 >$prompt_file
Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
$instruction

### Input:
$input

### Response:
!


#cat $prompt_file
alpaca -n 128 $prompt_file #>[2]/dev/null
#>$output_file

#awk '/^### Response:$/ { flag = 1; next } flag { print }' <$output_file

#cat $output_file
echo
echo $prompt_file >[1=2]

